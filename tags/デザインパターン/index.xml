<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>デザインパターン on soHTaro.com</title>
    <link>http://sohtaro.com/tags/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</link>
    <description>Recent content in デザインパターン on soHTaro.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 26 Jun 2017 14:38:39 +0900</lastBuildDate>
    
	<atom:link href="http://sohtaro.com/tags/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generation Gapパターンとは？</title>
      <link>http://sohtaro.com/blog/2017/06/26/generation-gap-pattern/</link>
      <pubDate>Mon, 26 Jun 2017 14:38:39 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/06/26/generation-gap-pattern/</guid>
      <description>最近関わっているプロジェクトでソースコードを自動生成するツールがあってそのツールでGeneration Gapパターンという聞いたことのないデザインパターンを使っていた。
はじめて聞いたデザインパターンだったので調べてみた。
Generation Patternとは、ソースコードを自動生成ツールがあることを前提としており、ソースコードを自動生成した後、そのコードに手を加えると再度自動生成した際に手を加えた部分が消えてしまうので、サブクラスを作ってそこに手を加えるというもの。
Javaのクラスを自動生成するツールをPythonで作ってみた。
このツールを実行すると名前、年齢、体重をフィールドとSetter、Getter、toStringメソッドを持つHumanクラスを自動生成する。
 実行すると以下のようなクラスが生成される。
public class Human{ protected String name; protected int age; protected double weight; public Human(String name, int age, double weight){ this.name = name; this.age = age; this.weight = weight; } public String toString(){ return &amp;quot;name=&amp;quot; + this.name + &amp;quot;, &amp;quot; + &amp;quot;age=&amp;quot; + this.age + &amp;quot;, &amp;quot; + &amp;quot;weight=&amp;quot; + this.weight; } }  このHumanクラスには手を加えず、Humanクラスを継承したMyHumanクラスを自分で作り、10代かどうかを判定するメソッドを追加する。
public class MyHuman extends Human{ public boolean isTeen(){ return super.</description>
    </item>
    
  </channel>
</rss>