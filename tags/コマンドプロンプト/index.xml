<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コマンドプロンプト on soHTaro.com</title>
    <link>http://sohtaro.com/tags/%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88/</link>
    <description>Recent content in コマンドプロンプト on soHTaro.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 04 Jul 2017 14:47:55 +0900</lastBuildDate>
    
	<atom:link href="http://sohtaro.com/tags/%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows7でバイナリダンプ&amp;Base64エンコード/デコードする方法</title>
      <link>http://sohtaro.com/blog/2017/07/04/cmd-certutil/</link>
      <pubDate>Tue, 04 Jul 2017 14:47:55 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/07/04/cmd-certutil/</guid>
      <description>Windowsでバイナリダンプするにはdebugコマンドを使う方法があるようだが、残念ながら64bit版Window7には搭載されていない。
他にないか調べてみると、certutilコマンドが使えるらしい。さらにこのコマンドでBASE64エンコード、デコードができるらしい。
環境 Window7 64bit
ファイルを16進テキストに変換 certutil -f -encodehex &amp;lt;入力ファイル名&amp;gt; &amp;lt;出力ファイル名&amp;gt; (&amp;lt;フォーマット値&amp;gt;)  16進テキストからバイナリに変換 certutil -f -decodehex &amp;lt;入力ファイル名&amp;gt; &amp;lt;出力ファイル名&amp;gt; (&amp;lt;フォーマット値&amp;gt;)  フォーマット値は、以下のサイトにあるものを指定できるのだと思う。たぶん。11がデフォルト。 https://msdn.microsoft.com/en-us/library/windows/desktop/aa380285(v=vs.85).aspx
例 $ echo abcdefg &amp;gt; test.txt $ echo 1234567890 &amp;gt;&amp;gt; test.txt # 16進テキストに変換 $ certutil -f -encodehex test.txt test_hex.txt 入力長 = 23 出力長 = 139 CertUtil: -encodehex コマンドは正常に完了しました。 $ type test_hex.txt 0000 61 62 63 64 65 66 67 20 0d 0a 31 32 33 34 35 36 abcdefg .</description>
    </item>
    
    <item>
      <title>コマンドプロンプトのpushdコマンド</title>
      <link>http://sohtaro.com/blog/2017/06/26/cmd-pushd/</link>
      <pubDate>Mon, 26 Jun 2017 15:46:46 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/06/26/cmd-pushd/</guid>
      <description>コマンドプロンプトでカレントディレクトリを移動するにはcdを使う。
cd /d d:\tempのように/dオプションを使えば別のドライブに移動できる。
今まで当たり前のようにディレクトリの移動にはcdを使ってきたが、pushdというcdより素敵なコマンドを発見したので使ってみる。(Windows7)
pushdの利点 pushdコマンドはcdと同様にカレントディレクトリを移動できるが以下の利点がある。
 pushdを実行した後、popdで元のディレクトリに戻れる 現在のドライブとは別のドライブに移動できる \server\hoge\fugaのようなUNCパスに移動できる  popdで元のディレクトリに戻る pushdでカレントディレクトリを移動すると移動前のカレントディレクトリがディレクトリスタックに保存されていく。
pushdを引数なしで実行すると現在のディレクトリスタックを表示する。
popdを実行すると直前に保存したパスに移動され、そのパスはディレクトリスタックから削除される。
C:\temp&amp;gt;pushd C:\ C:\&amp;gt;pushd Windows C:\Windows&amp;gt;pushd Logs # 引数なしのpushdでディレクトリスタックを表示 C:\Windows\Logs&amp;gt;pushd C:\Windows C:\ C:\temp # popdで移動前のディレクトリに戻る C:\Windows\Logs&amp;gt;popd C:\Windows&amp;gt;popd C:\&amp;gt;popd C:\temp&amp;gt;  別のドライブに移動 C:\temp&amp;gt;pushd E:\test E:\test&amp;gt;  UNCパスに移動 UNCパスをpushdすると空きドライブに自動的に割り当てられ、移動できる。 popdで元のディレクトリに戻るとドライブの割り当ては解除される。
E:\test&amp;gt;pushd \\server1\UserData\UserData\test Z:\test&amp;gt; Z:\test&amp;gt;net use ステータス ローカル名 リモート名 ネットワーク名 -------------------------------------------------------------------------- OK Z: \\server1\UserData Microsoft Windows Network コマンドは正常に終了しました。 Z:\test&amp;gt;popd E:\test&amp;gt;net use 新しい接続は記憶されます。 一覧にエントリが存在しません。  pushdでZドライブが割り当られ、popdで割り当ては解除された。</description>
    </item>
    
    <item>
      <title>バッチファイルのテンプレート</title>
      <link>http://sohtaro.com/blog/2017/06/17/cmd-date-time/</link>
      <pubDate>Sat, 17 Jun 2017 22:03:15 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/06/17/cmd-date-time/</guid>
      <description>バッチファイルを作ることは最近減ってきているが、たまに作るときに一から作成すると時間がかかるので、最低限のテンプレートを用意しておく。
@echo off rem バッチファイルの説明 rem 環境変数の定義 set VAR1=&amp;quot;VAR1の値&amp;quot; set VAR2=&amp;quot;VAR2の値&amp;quot; pushd &amp;quot;%~dp0&amp;quot; pause  echo offは実行するコマンドを表示させないコマンド。@をコマンドの前につけるとそのコマンドは表示されなくなるが、すべてのコマンドに@をつけるのは面倒なのでecho offですべてのコマンドを表示しないようにする。
ただし、echo off自体は表示されてしまうので@をつける。
remはコマンド行。
setは環境変数を設定する。
pushdはディレクトリの移動するコマンドで、%~dp0はこのバッチファイルがあるディレクトリを表す。
なのでpushd &amp;quot;%~dp0&amp;quot;はこのバッチファイルがあるディレクトリをカレントディレクトリにする。
ディレクトリの移動はcdでもできるが、cdと比べてpushdは以下の利点がある。
 pushdを実行した後、popdで元のディレクトリに戻れる 現在のドライブとは別のドライブに移動できる \server\hoge\fugaのようなUNCパスに移動できる  pauseは処理を一時停止するコマンド。このコマンドがないとウィンドウが閉じてしまい処理結果がわからないので入れておく。</description>
    </item>
    
    <item>
      <title>バッチファイルで現在日付、現在時刻を取得する方法</title>
      <link>http://sohtaro.com/blog/2017/06/16/cmd-date-time/</link>
      <pubDate>Fri, 16 Jun 2017 22:03:15 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/06/16/cmd-date-time/</guid>
      <description>バッチファイルの中でフォルダ名やファイル名に現在日付、現在時刻を使うことがよくあるが、すぐ忘れるのでメモしておく。
現在日付を表示 $ echo %date% 2017/06/16 $ date /t 2017/06/16  現在時刻を表示 $ echo %time% 11:58:29.47 $ time /t 11:59  yyyyMMdd形式で表示 $ set yyyymmdd=%date:~0,4%%date:~5,2%%date:~8,2% $ echo %yyyymmdd% 20170616  yyyyMMddHHmmss形式で表示 $ set yyyymmddhhmmss=%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2% $ echo %yyyymmddhhmmss% 20170616221123  %var:~m,n%は変数varのm文字目からn文字を切り出す。(mは0始まり)</description>
    </item>
    
    <item>
      <title>バッチファイルで文字列操作</title>
      <link>http://sohtaro.com/blog/2017/06/15/cmd-string-operation/</link>
      <pubDate>Thu, 15 Jun 2017 22:20:44 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/06/15/cmd-string-operation/</guid>
      <description>バッチファイルで部分文字列を取得したり、置換したり文字列を操作する方法についてまとめる。
部分文字列を取得 基本的な書式は%var:~m,n%で変数varのm文字目からn文字を取得する。（mは0始まり）
その他にも以下のような書式がある。
   書式 説明     %var:~m,n% 変数varのm文字目からn文字   %var:~m% 変数varのm文字目から末尾   %var:~m,-n% 変数varのm文字目から末尾のn文字を除いた文字列   %var:~-m% 変数varの末尾m文字   %var:~-m,n% 変数varの末尾m文字目からn文字   %var:~-m,-n% 変数varの末尾m文字目から末尾のn文字を除いた文字列    $ set name=sohtaro.com $ echo %name:~3,4% taro $ echo %name:~3% taro.com $ echo %name:~3,-2% taro.c $ echo %name:~-3% com $ echo %name:~-3,1% c $ echo %name:~-3,-1% co  mを省略したりnを省略したり-nで最後のn文字分を除いたりできるが基本はm,nだけでいいと思う。
詳細はコマンドプロンプトでset /?を実行すると確認できる。</description>
    </item>
    
    <item>
      <title>コマンドプロンプトの表示を変更する</title>
      <link>http://sohtaro.com/blog/2017/06/07/cmd-prompt/</link>
      <pubDate>Wed, 07 Jun 2017 15:50:05 +0900</pubDate>
      
      <guid>http://sohtaro.com/blog/2017/06/07/cmd-prompt/</guid>
      <description>コマンドプロンプトを使って作業するときプロンプトにカレントディレクトリのパスが表示され、カレントディレクトリによってコマンド入力位置が異なる。
これがとてもウザいのでカスタマイズしてみた。
デフォルトのプロンプト 以下のようにcdするたびに入力位置が変わり作業しづらい。 プロンプト変更 プロンプトに表示される内容はpromptコマンドで変更できる。
prompt 特殊コード  ※特殊コードの大文字・小文字は問わない。
   特殊コード 説明     $d 現在日付   $t 現在時刻(100分の1秒まで)   $h バックスペース(直前の1文字消去)   $g &amp;gt;   $l &amp;lt;   $q =   $v Windowsのバージョン   $$ $   $p カレントのドライブとパス   $s 空白   $_ 改行    どんなプロンプトが使いやすいか考えたが、とりあえず以下の三点を満たすプロンプトにする。
 現在日時を表示 カレントのドライブとパスを表示を表示 コマンド入力は常に同じ位置  この三つを改行して設定するには以下のようにする。</description>
    </item>
    
  </channel>
</rss>