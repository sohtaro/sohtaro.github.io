<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Blogrammer&#39;s.Net</title>
    <link>http://blogrammers.net/tags/git/</link>
    <description>Recent content in Git on Blogrammer&#39;s.Net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 01 Jun 2017 22:16:45 +0900</lastBuildDate>
    
	<atom:link href="http://blogrammers.net/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gitの設定ファイルについてまとめてみた</title>
      <link>http://blogrammers.net/post/git-config/</link>
      <pubDate>Thu, 01 Jun 2017 22:16:45 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-config/</guid>
      <description>Gitの設定ファイルには多くの設定があるが、設定ファイルの種類やよく使うコマンドについてまとめてみた。
設定ファイルの種類 設定ファイルは以下の三つがあり、上から順に優先順位が高い。
   ファイルパス 対象 使用するオプション     .git/config リポジトリごと --local または指定なし   ~/.gitconfig ユーザーごと --global   /etc/gitconfig /usr/local/etc/gitconfig
など(※1) システム全体 --system    (※1)私のPCのWindows7ではC:\Program Files\Git\mingw64/etc/gitconfigにある
設定の一覧を表示 $ git config (--system|--global|--local) -l  現在有効な設定を表示 $ git config -l  リポジトリ設定、ユーザー設定、システム設定をあわせて表示される
設定値がどのファイルで設定されているかを表示 $ git config (--system|--global|--local) --show-origin -l  設定ファイルをエディタで編集 $ git config (--system|--global|--local) -e(--edit)  設定(置き換え) $ git config (--system|--global|--local) 設定名 設定値 # 設定が複数ある場合のすべて置き換え $ git config (--system|--global|--local) --replace-all 設定名 設定値  設定の追加 $ git config (--system|--global|--local) --add 設定名 設定値  設定の削除 $ git config (--system|--global|--local) --unset 設定名 # 設定が複数ある場合の１つを削除 $ git config (--system|--global|--local) --unset 設定名 設定値 # 設定が複数ある場合のすべてを削除 $ git config (--system|--global|--local) --unset-all 設定名  よく使う設定一覧 よく使う設定名と設定する内容を表にした。随時追加する予定。</description>
    </item>
    
    <item>
      <title>TortoiseGitのアイコンオーバレイが表示されない件の解決方法</title>
      <link>http://blogrammers.net/post/git-tortoisegit-icon-overlay/</link>
      <pubDate>Tue, 30 May 2017 22:26:07 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-tortoisegit-icon-overlay/</guid>
      <description>TortoiseGitのアイコンオーバレイがなんらかのタイミングで表示されなくなったので解決方法のメモです。
アイコンオーバレイとはエクスプローラーのフォルダやファイルのアイコン上に表示されるマークです。
TortoiseGitの設定確認 TortoiseGitの[設定]-[アイコンオーバーレイ]-[オーバーレイハンドラー]の順に開きます。 TortoiseGit以外で9個のオーバーレイがインストールされているようです。
レジストリの確認 レジストリエディターを起動するをクリックし、レジストリを確認します。
キー：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers
TortoiseGitで9個とTortoiseGit以外で9個で合計18個のオーバーレイの設定があります。
Windowsの上限は15個のようです。
この上限を超えると優先順位の低いものから表示されなくなるようです。
不要レジストリの削除 解決方法としては、不要なオーバーレイアイコンを削除します。
Dropboxのオーバーレイアイコンが４つありますが、Dropboxはほとんど使ってないので削除します。
ちなみに一番下の三つのオーバーレイアイコンはWindowsで使用しているらしいのでそのままにしておきます。
 EnhancedStorageShell
 Offline Files
 SharingPrivate
  00aswと00avastも削除して問題ないと思いますがとりあえずそのままにしておきます。
PC再起動 オーバーレイアイコンの設定が15個以下になったのでPCを再起動します。
オーバーレイアイコンが表示されることを確認できました。</description>
    </item>
    
    <item>
      <title>git statusのショートフォーマット</title>
      <link>http://blogrammers.net/post/git-status-short/</link>
      <pubDate>Sun, 28 May 2017 22:38:41 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-status-short/</guid>
      <description>git statusってよく使いますよね。ファイルを追加する前やコミットした後、Git Bashの起動直後など実によく使います。
そのよく使うコマンドの一つのgit statusですが普通にオプションなしで実行すると
$ git status On branch master Changes to be committed: (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage) modified: b.txt Changes not staged for commit: (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory) deleted: dir1/d.txt Untracked files: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed) a.txt  こんな感じで非常に長いです。
最近まで私も知らなかったのですが、実は、短いフォーマットで出力するオプションが存在します。</description>
    </item>
    
    <item>
      <title>ローカルリポジトリから共有リポジトリを作成する方法</title>
      <link>http://blogrammers.net/post/git-shared-repo-from-local-repo/</link>
      <pubDate>Sat, 27 May 2017 22:57:38 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-shared-repo-from-local-repo/</guid>
      <description>今回はローカルリポジトリが存在する状態で共有リポジトリを作成する方法を調べてみました。
以下の二つがあるようです。
 空の共有リポジトリを作成しローカルリポジトリからプッシュする ローカルリポジトリを共有リポジトリとして複製する  準備 以下のディレクトリを用意します。
 共有リポジトリを作成するディレクトリ：c:/share
 ローカルリポジトリのあるディレクトリ:c:/gittest/hoge
(コミット履歴ありのリポジトリ)
  方法１．空の共有リポジトリを作成しローカルリポジトリからプッシュ $ cd c:/share # 共有リポジトリは慣例としてディレクトリ名の終わりを`.git`にします $ mkdir hoge.git $ cd hoge.git $ git init --bare --shared  --bareはベアリポジトリを作成するオプション。 ベアリポジトリとは作業ディレクトリを持たないリポジトリです。
--sharedはリポジトリを共有するときのアクセス権を設定するオプションで--shared=0666のようにアクセス権を設定します。
パーミッション指定なしの場合は0664です。
同じグループのみに読み書き許可するには0660を指定します。
これで空の共有リポジトリが作成できました。
あとはローカルリポジトリから共有リポジトリにプッシュします。
$ cd c:/gittest/hoge # 送信対象で&amp;quot;*&amp;quot;を指定するとすべてのブランチ、タグがプッシュされるようです $ git push c:/share/hoge.git &amp;quot;*&amp;quot;  方法２.ローカルリポジトリを共有リポジトリとして複製する $ cd c:/share $ git clone --bare c:/gittest/hoge hoge.git  --bareはgit initと同様にベアリポジトリを作成します。
方法1.と2.で設定ファイルが微妙に違ったりしますが、特に問題ないと思います。
あとはこのリポジトリをサーバー上に置き、アクセスするためのプロトコルの準備をすると他の開発者と共有できるようになります。</description>
    </item>
    
    <item>
      <title>Gitリポジトリ内のファイル削除・ファイル名変更</title>
      <link>http://blogrammers.net/post/git-repo-rm-mv/</link>
      <pubDate>Fri, 26 May 2017 21:53:17 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-repo-rm-mv/</guid>
      <description>Gitで管理しているファイルを管理から外して削除したり、ファイル名を変更したい場合があります。
Git Bashのrmやmvを実行してからでもできるのですが、gitに専用のコマンドが用意されています。
両方試してみましょう。
 最初にrmやmvを実行する git rmまたはgit mvを実行する  リポジトリにファイル用意 a.txt
b.txt
最初にrmやmv実行 aを削除、bをファイル名変更します。
$ rm a.txt $ mv b.txt c.txt $ git status -s D a.txt D b.txt ?? c.txt  a.txtとb.txtが削除ファイル、c.txtが未追跡ファイルとなりました。インデックスには登録されていませんのでgit addとgit commitします。
$ git add . $ git status -s D a.txt R b.txt -&amp;gt; c.txt $ git commit -m &amp;quot;remove a.txt , rename b.txt &amp;quot;  git addすることによりa.txtが削除ファイル、b.txtがファイル名変更として認識されました。
git rmまたはgit mv aを削除、bをファイル名変更します。
$ git rm a.</description>
    </item>
    
    <item>
      <title>Gitで使うエディタを変更してみる</title>
      <link>http://blogrammers.net/post/git-config-editor/</link>
      <pubDate>Wed, 24 May 2017 11:47:28 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-config-editor/</guid>
      <description>gitでコミットのメッセージを編集するときなどに使うエディタはviエディタが使われます(※)。viに慣れていない人にとっては他のエディタを使いたいかもしれません。ここではWindows環境で他のエディタを使用するように設定を変更してみます。
(※)ただし、デフォルトエディタ(環境変数VISUALまたはEDITOR)が設定されている場合は、そのエディタが使われます。
エディタを変更する エディタを変更するためには以下のコマンドを実行します。
$ git config --global core.editor &amp;quot;エディタを実行するコマンド&amp;quot;  今回はサクラエディタに変更してみます。
# パスにスペースがあるのでシングルクオーテーションで囲む # -CODE=4はUTF-8で開くためのサクラエディタのオプション # フォルダの区切りは「/」(スラッシュ) $ git config --global core.editor &amp;quot;&#39;C:/Program Files/sakura2-2-0-1_x64/sakura.exe&#39; -CODE=4&amp;quot; # サクラエディタの実行ファイルのフォルダにパスが通っている場合は以下でもOK $ git config --global core.editor &amp;quot;sakura.exe -CODE=4&amp;quot;  実際にファイルを用意し、コミットすると
$ echo a &amp;gt; a.txt $ git add a.txt $ git commit a.txt  コミットメッセージのファイルがサクラエディタで開きました。 まとめ viに慣れてない、またはお気に入りのエディタがある人は変更するとよいでしょう。</description>
    </item>
    
    <item>
      <title>Gitのローカルリポジトリ作成</title>
      <link>http://blogrammers.net/post/git-local-repo/</link>
      <pubDate>Tue, 23 May 2017 17:45:03 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-local-repo/</guid>
      <description>Gitのローカルリポジトリを作成するには以下の二つの方法があります。
1. ディレクトリでリポジトリを作成(git init)
2. 共有リポジトリを複製する(git clone)
実際にローカルリポジトリを作成してみます。
ディレクトリでリポジトリ作成  Gitで管理したいディレクトリを右クリックし、Git Bash Hereを選択してGit Bashを起動   Git Bashでgit initを実行  $ git init Initialized empty Git repository in C:/gittest/sample/.git/  すると、空のローカルリポジトリとして.gitディレクトリが作成されます。
.gitディレクトリにはリポジトリデータ、設定ファイルなどが入っています。
ローカルリポジトリの作成は、ディレクトリが空の場合でも、すでにファイルが存在する場合でも関係なく実行できます。 なので、開発しているプロジェクトを途中からGitで管理することが可能です。
共有リポジトリを複製 ローカルにある共有リポジトリを複製してみます。
 共有リポジトリのパス：c:/share/test.git 複製するディレクトリのパス:c:/gittest
# Git Bash起動し複製するディレクトリに移動 $ cd c:/gittest $ git clone c:/share/test.git Cloning into &#39;test&#39;... done. $ ls test/   testディレクトリができました。
サーバーにある共有リポジトリの複製についてはまた後日やってみたいと思います。</description>
    </item>
    
    <item>
      <title>Gitの初期設定</title>
      <link>http://blogrammers.net/post/git-initial-setting/</link>
      <pubDate>Mon, 22 May 2017 15:49:04 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-initial-setting/</guid>
      <description>前回、Gitのインストールを行いました。今回はGitを使い始めるためのいくつかの設定をします。
名前とメールアドレスの設定 GitでファイルをコミットしたときにAuthorが記録されるのですが、名前とメールアドレスを設定していないとコミット時にエラーになるので最初に設定しておきます。
以下の二つのコマンドを実行します。
$ git config --global user.name &amp;quot;Yamada Taro&amp;quot; $ git config --global user.email &amp;quot;yamadataro@example.com&amp;quot;  git configコマンドはGitの設定を表示したり変更したりするコマンドです。
--globalを指定するとユーザのGitの設定が対象で、指定なしの場合はリポジトリのGitの設定が対象となります。
~~globalで設定した内容は下記のファイルに書かれます。
~/.gitconfig
このファイルを直接編集してもよいのですが、いちいち開くのは面倒ですのでコマンドの方が便利です。また、以下のコマンドを実行すると.gitconfigをエディタで開くことができ、編集することもできます。
$ git config --global -e または $ git config --global --edit  日本語ファイル名を表示する ファイル名に日本語が含まれる場合、git statusなどでファイル名がエスケープして表示されます。これを防止するには以下のコマンドを実行します。
$ git config --global core.quotepath false  これでGitを使うための準備ができました。</description>
    </item>
    
    <item>
      <title>GitHubのリポジトリを削除する方法</title>
      <link>http://blogrammers.net/post/github-delete-repo/</link>
      <pubDate>Mon, 22 May 2017 09:44:16 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/github-delete-repo/</guid>
      <description>GitHubにいくつかリポジトリを作成していますが、不要なリポジトリがあるので削除してみました。
削除方法は以下のとおりです。
 GitHubのリポジトリのページにアクセス Settingsをクリック  遷移した画面の一番下のDanger ZoneにあるDelete this repositoriyをクリック  削除すると元に戻せないメッセージなどの警告ダイアログが出る
リポジトリ名を入力し、I understand the consequences, delete this repositoryをクリックするかEnterを押す   以上で、リポジトリを削除できました。
GitHub Helpは以下にあります。
Deleting a repository</description>
    </item>
    
    <item>
      <title>GitHubのユーザー名を変える</title>
      <link>http://blogrammers.net/post/github-change-username/</link>
      <pubDate>Sat, 20 May 2017 09:58:33 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/github-change-username/</guid>
      <description>GitHubのユーザー名にもろに自分を名字入れてまして、それをずっと変えたいと思ってましたので変更してみました。
ユーザー名を変更するとどうなるか GitHub Helpでユーザー名変えるとどうなるかのページがあったので確認。
What happens when I change my username?
何が書いてあるかまとめるとだいたいこんな感じ。
 旧ユーザー名のリポジトリへの参照は新ユーザー名にリダイレクトされる プロフィールページ(https://github.com/旧ユーザー名)はリダイレクトされない(404エラー) 旧リポジトリへのpush、旧リポジトリからのcloneは可能 旧ユーザー名を他人が取得でき、その人が自分と同じ名前のリポジトリを作成するとリダイレクトされなくなる 旧ユーザー名のURLを新ユーザー名のURLに速やかに変更した方がよい  変更手順  GitHubのプロフィールページ(https://github.com/旧ユーザー名)にアクセス [Settings]をクリック [Account]をクリック Change usernameをクリック  すると以下のような確認ダイアログが出ます。
メッセージの内容はGitHub Helpに書いていたとおりです。
5. I understand, let&#39;s change my usernameをクリック 6. 新しいユーザー名を入力し、Change my usernameをクリック
7. ユーザー名変更完了 表示されているリンクのupdate your local repositoriesにリモートURL変更手順が書いてありますので手順どおり変更します。
ローカルPCの設定変更 # Git Bash起動 $ cd ローカルプロジェクト # 変更前の設定確認 $ git remote -v origin git@github.com:old_username/repository_name.git (fetch) origin git@github.com:old_username/repository_name.git (push) # リモートURL変更 $ git remote set-url origin git@github.</description>
    </item>
    
    <item>
      <title>git add .とgit add -Aとgit add -uの違い</title>
      <link>http://blogrammers.net/post/git-add-option/</link>
      <pubDate>Fri, 19 May 2017 14:56:48 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-add-option/</guid>
      <description>今までgit addするときはgit add .をずっと使ってきたのだが、-Aと-uとの違いがわからなかったので調べてみた。
バージョン Git for Windows2.13.0
ヘルプで確認 とりあえずヘルプで-Aと-uを確認。
$ git help add   -A
&amp;ndash;all
&amp;ndash;no-ignore-removal
Update the index not only where the working tree has a file matching &amp;lt;pathspec&amp;gt; but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.
If no &amp;lt;pathspec&amp;gt; is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories).</description>
    </item>
    
    <item>
      <title>Gitインストール</title>
      <link>http://blogrammers.net/post/git-install/</link>
      <pubDate>Wed, 17 May 2017 16:09:38 +0900</pubDate>
      
      <guid>http://blogrammers.net/post/git-install/</guid>
      <description>環境とインストールバージョン  Windows7 64bit Git for Windows2.13.0  インストール手順  以下のページのDownloadsから最新版をダウンロードする。
https://git-scm.com/
 ダウンロードしたexeファイルをダブルクリック。
 Nextをクリック  インストール先の設定
デフォルトのままNextをクリック。  インストールするコンポーネントの選択
すべてデフォルトで問題ありませんが、コンポートネントの詳細を記載します。
 Additional icons
デスクトップのショートカットアイコンの設定。使うことはなさそうなのでOFF。 Windows Explorer integration
エクスプローラーのコンテキストメニューの設定。CUIでGitを使う場合はよく使ので必須。ON。
 Git LFS
サイズの大きなバイナリファイルを扱うための設定。ON。
 Associate .git* configration files with the default text editor
.gitファイルをデフォルトのテキストエディタで起動する設定。ON。
 Associate .sh files to be run with Bash
.shファイルをBashで起動する設定。ON。
 Use a TrueType font in all console Windows
コマンドプロンプトなどすべてのコンソールのフォントを変更する設定。 ONにすると文字化けすることもあるようなのでOFF。
  スタートメニューフォルダの選択</description>
    </item>
    
  </channel>
</rss>